import { glob } from 'glob';
import { pathToFileURL } from 'url';
import { realpathSync } from 'fs';
import inspector from 'inspector/promises';
import { coverageFilter, displayReport } from './core/coverage.js';
import { runner } from "./core/runner.js";
import { parallel } from "./core/parallel-runner.js";
import { testQueue } from './core/queue.js';
import { hooksRegistry } from './core/hooks.js';
import { DOM } from './core/registry.js';

import path from "path";
import chalk from 'chalk';
import { checkReactDependencies } from "./react/check-deps.js";
import { cleanup } from "./react/index.js";
import {BOT} from "./config/index.js";


// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ API
export { Expect, expect } from "./expects/expect.js";
export { ExpectError } from "./expects/errors.js";
export * from './core/registry.js';
export { coverageFilter, generateReport, displayReport } from './core/coverage.js';
export { fire } from './events/index.js';
export { waitFor } from './utils/index.js';

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
export const run = async (root, options = {}) => {
    global.testResults = {}
    options.root = root;

    const inspectPort = options.debug ? (options.debugPort || 9229) : undefined;

    if (options.debug) {
        console.log(chalk.yellow('[Debug] Waiting for debugger to attach...'));
        process.execArgv.push(`--inspect-brk=${inspectPort}`);
        await new Promise(resolve => setTimeout(resolve, 1000));
        console.log(chalk.green(`[Debug] Starting in debug mode on port ${inspectPort}`));
    }

    if (options.dom || options.react) {
        console.log(chalk.green(`${BOT} Preparing test environment...`));
    }
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DOM, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if (options.dom) {
        await DOM.setup();
            console.log(chalk.green(`   ${options.react ? "‚îú" : "‚îî"}‚îÄ‚îÄ üì¶ DOM ready!`));
    }

    if (options.react) {
        if (!checkReactDependencies(root)) {
            console.error(chalk.red('   ‚îî‚îÄ‚îÄ ‚öõÔ∏è React cannot be initialized due to missing dependencies.'));
            process.exit(1);
        }
        console.log(chalk.green(    '   ‚îî‚îÄ‚îÄ ‚öõÔ∏è React ready!'));
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞
    const session = new inspector.Session();
    session.connect();

    await session.post('Profiler.enable');
    await session.post('Profiler.startPreciseCoverage', {
        callCount: true,
        detailed: true
    });

    testQueue.clearQueue();

    let files = [];

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (options.files && options.files.length) {
        files = options.files;
    }
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–∫–ª—é—á–µ–Ω–∏—è/–∏—Å–∫–ª—é—á–µ–Ω–∏—è
    else {
        const includePattern = options.include || '**/__tests__/**/*.test.js';
        const excludePattern = options.exclude || [];
        files = await glob(includePattern, { ignore: excludePattern });
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    for (const file of files) {
        testQueue.setCurrentFile(file);
        hooksRegistry.clearFileLevelHooks();

        const fileUrl = pathToFileURL(realpathSync(file)).href;

        // –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–µ—à –º–æ–¥—É–ª—è
        if (options.watch) {
            delete require.cache[require.resolve(file)];
        }

        await import(fileUrl + `?t=${Date.now()}`);
    }

    // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if (options.parallel) {
        await parallel(testQueue.getQueue(), options.maxWorkers);
    } else {
        await runner(testQueue.getQueue(), options);
    }

    const coverage = await session.post('Profiler.takePreciseCoverage');
    await session.post('Profiler.stopPreciseCoverage');

    if (options.react) {
        try {
            cleanup();
        } catch (e) {
            // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if (options.coverage) {
        const filteredCoverage = coverageFilter(coverage);
        
        if (options.reportType === 'lcov') {
            const createReport = await import('./reporters/lcov/index.js');
            createReport.default(options.reportDir + path.sep + (options.reportFile || 'easy-report.lcov'), filteredCoverage);
        } else if (options.reportType === 'html') {
            const createReport = await import('./reporters/html/index.js');
            createReport.default(options.reportDir + path.sep + (options.reportFile || 'easy-report.html'), global.testResults,  filteredCoverage);
        } else if (options.reportType === 'junit') { // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è junit
            const createReport = await import('./reporters/junit/index.js');
            createReport.default(options.reportDir + path.sep + (options.reportFile || 'junit.xml'), global.testResults);
        } else {
            displayReport(filteredCoverage);
        }
    }
    
    return global.testResults;
};
