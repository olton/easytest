import { createRequire } from 'module';

global.require = createRequire(import.meta.url);

let React, ReactDOM, ReactTestUtils;

// –§—É–Ω–∫—Ü—ñ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –º–æ–¥—É–ª—è
export const initReact = () => {
    try {
        // –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç React, —â–æ–± –Ω–µ –≤–∏–º–∞–≥–∞—Ç–∏ –π–æ–≥–æ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ 
        // –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î React —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        React = require('react');
        ReactDOM = require('react-dom/client');
        ReactTestUtils = require('react-dom/test-utils');

        global.React = React;
        global.ReactDOM = ReactDOM;
        global.ReactTestUtils = ReactTestUtils;
        
        return true;
    } catch (error) {
        console.error(`Failed to initialize React: ${error.message}`);
        return false;
    }
};

// –£—Ç–∏–ª—ñ—Ç–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
export const render = async (Component, props = {}, container = null) => {
    
    if (!React || !ReactDOM) {
        throw new Error('React not initialized. Make sure to call initReact() first.');
    } else {
        // console.log(`ü§ñ Found React version: ${React.version}`);
        // console.log(`ü§ñ Found ReactDOM version: ${ReactDOM.version}`);
    }

    // –Ø–∫—â–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
    if (!container) {
        container = document.createElement('div');
        document.body.appendChild(container);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î createRoot –≤ ReactDOM (React 18+)
    if (ReactDOM.createRoot) {
        // console.log('ü§ñ Using React createRoot API (18+)');
        const root = ReactDOM.createRoot(container);
        await new Promise(resolve => {
            root.render(Component);
            setTimeout(resolve, 10); // –î–∞—î–º–æ —á–∞—Å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É
        });
    } else {
        // console.log('ü§ñ Using React render API (< 18)');
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π API –¥–ª—è React < 18
        ReactDOM.render(Component, container);
        await new Promise(resolve => setTimeout(resolve, 10));
    }

    return {
        container,
        unmount: () => {
            try {
                if (ReactDOM.createRoot) {
                    // –î–ª—è React 18+
                    const root = ReactDOM.createRoot(container);
                    root.unmount();
                } else {
                    // –î–ª—è React < 18
                    ReactDOM.unmountComponentAtNode(container);
                }
                container.remove();
            } catch (e) {
                console.error('Error when removing the component:', e);
            }
        },
        rerender: (newProps) => {
            ReactDOM.render(React.createElement(Component, newProps), container);
        },
        // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –ø–æ—à—É–∫—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
        getByText: (text) => {
            const elements = Array.from(container.querySelectorAll('*'));
            return elements.find(el => el.textContent === text);
        },
        getAllByText: (text) => {
            const elements = Array.from(container.querySelectorAll('*'));
            return elements.filter(el => el.textContent === text);
        },
        getByTestId: (testId) => {
            return container.querySelector(`[data-testid="${testId}"]`);
        },
        // –î–æ–ø–æ–º–æ–≥–∞ –∑ –ø–æ–¥—ñ—è–º–∏
        fireEvent: {
            click: (element) => {
                ReactTestUtils.act(() => {
                    element.click();
                });
            },
            change: (element, value) => {
                ReactTestUtils.act(() => {
                    element.value = value;
                    ReactTestUtils.Simulate.change(element);
                });
            }
        },
        debug: () => {
            console.log(container.innerHTML);
        }
    };
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è snapshot —Ç–µ—Å—Ç—ñ–≤
export const snapshot = (rendered) => {
    return rendered.container.innerHTML;
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ç–µ—Å—Ç—ñ–≤
export const cleanup = () => {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –¥–æ–¥–∞–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ —ñ –≤–∏–¥–∞–ª—è—î–º–æ —ó—Ö
    const containers = document.querySelectorAll('[data-testid]');
    containers.forEach(container => {
        if (container.parentNode) {
            ReactDOM.unmountComponentAtNode(container);
            container.parentNode.removeChild(container);
        }
    });
};